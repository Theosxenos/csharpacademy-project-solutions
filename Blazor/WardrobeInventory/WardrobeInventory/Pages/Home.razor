@page "/"
@using WardrobeInventory.Models
@using WardrobeInventory.Services

@inject ImageService ImageService
@inject WardrobeService WardrobeService

<PageTitle>Home</PageTitle>

<h1 class="display-4 text-center">Wardrobe Inventory</h1>
<div class="container-lg">
    <div class="text-center mb-3">
        <button class="btn btn-success"  data-bs-target="#wardrobeUpsertModal" data-bs-toggle="modal" @onclick="() => wardrobeItemId = null">New Item</button>
    </div>
    <div class="g-3 row row-cols-4">
        @if (items == null || items.Count == 0)
        {
            <p>No items found</p>
        }
        else
        {
            foreach (var wardrobeItem in items)
            {
                <div class="col">
                    <div class="card h-100">
                        <img class="card-img-top" src="@ImageService.GetImageUrl(wardrobeItem.ImageData)" alt="Photo of @wardrobeItem.Name"/>
                        <div class="card-body border-top bg-light">
                            <h5 class="card-title">@wardrobeItem.Name</h5>
                            <p class="card-text">@wardrobeItem.Brand</p>
                        </div>
                        <div class="card-footer text-end">
                            <button class="btn btn-warning" data-bs-target="#wardrobeUpsertModal" data-bs-toggle="modal" @onclick="() => wardrobeItemId = wardrobeItem.Id">Edit</button>
                            <button class="btn btn-danger" data-bs-target="#wardrobeDeleteModal" data-bs-toggle="modal" @onclick="() => wardrobeItemId = wardrobeItem.Id">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<WardrobeUpsert FormSubmitted="RefreshItemList" WardrobeId="wardrobeItemId" />
<WardrobeDeleteModal ItemDeleted="RefreshItemList" WardrobeId="wardrobeItemId"/>

@code
{
    private int? wardrobeItemId;
    private List<WardrobeItem>? items;

    protected override async Task OnInitializedAsync()
    {
        items = await WardrobeService.GetAllAsync();
    }

    private async Task RefreshItemList()
    {
        wardrobeItemId = null;
        items = await WardrobeService.GetAllAsync();
        StateHasChanged();
    }
}
