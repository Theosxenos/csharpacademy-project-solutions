@page "/"
@using MemoryGame.Models
@using MemoryGame.Services
@using System.Timers
@rendermode @(new InteractiveServerRenderMode(false))

@inject LocalStorageService Service


<PageTitle>Home</PageTitle>

<h1 class="display-4 text-center mb-3">Memory Game</h1>
<div class="text-center">
    <button class="btn btn-success" @onclick="StartGame">Start</button>
    <button class="btn btn-danger" @onclick="StopGame">Stop</button>
    <p class="mt-3 display-6">
        Game time: @gameTime.ToString(@"mm\:ss")
    </p>
</div>

<div class="container-lg">
    <div class="gap-2 justify-content-center row row-cols-5 mb-3">
        @foreach (var card in cards)
        {
            <div class="col border border-dark rounded-3 p-0">
                <img class="card-img-top rounded-3" src="@(card.IsVisible ? card.Image : "background.webp")" @onclick="() => HandleCardClick(card)"/>
            </div>
        }
    </div>
</div>

@code
{
    readonly Card[] cards = new Card[12];
    readonly Random rng = new();
    readonly List<Card> activeCards = new();
    readonly Timer cardTimer = new(TimeSpan.FromSeconds(2));
    readonly Timer gameTimer = new(1_000);
    TimeSpan gameTime;
    bool gameRunning;

    protected override void OnInitialized()
    {
        InitGame();

        cardTimer.Elapsed += CardTimerOnElapsed;
        cardTimer.AutoReset = false;

        gameTimer.Elapsed += GameTimerOnElapsed;
    }

    private void InitGame()
    {
        gameTime = new TimeSpan();

        for (var i = 1; i <= 12; i++)
        {
            cards[i - 1] = new Card
            {
                Id = i,
                Image = $"planet0{i % 6}.png"
            };
        }

        rng.Shuffle(cards);
    }

    private void GameTimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        gameTime = gameTime.Add(TimeSpan.FromSeconds(1));
        InvokeAsync(StateHasChanged);
    }

    private void ResetActiveCards()
    {
        foreach (var card in activeCards)
        {
            card.IsVisible = false;
        }

        activeCards.Clear();
        StateHasChanged();
    }

    private async Task HandleCardClick(Card card)
    {
        if (card.IsMatched || card.IsVisible || !gameRunning)
            return;

        if (activeCards.Count == 0)
        {
            activeCards.Add(card);
        }
        else if (activeCards.Count == 1)
        {
            if (activeCards[0].Image.Equals(card.Image) && activeCards[0].Id != card.Id)
            {
                activeCards[0].IsMatched = true;
                card.IsMatched = true;
                activeCards.Clear();

                if (cards.All(c => c.IsMatched))
                {
                    await GameOver();
                }
            }
            else
            {
                activeCards.Add(card);
                cardTimer.Start();
            }
        }
        else if (activeCards.Count == 2)
        {
            if (!activeCards.TrueForAll(c => c.Id != card.Id))
                return;

            cardTimer.Stop();
            ResetActiveCards();
            activeCards.Add(card);
        }

        card.IsVisible = true;
    }

    private async Task GameOver()
    {
        StopGame();
        var gameScores = await Service.GetItemAsync<List<Score>>("scores") ?? [];
        gameScores.Add(new Score
        {
            Date = DateTime.Now,
            GameTicks = gameTime.Ticks
        });

        await Service.SetItemAsync("scores", gameScores);
    }

    private void CardTimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        // Use InvokeAsync to switch execution back to the dispatcher thread
        InvokeAsync(() =>
        {
            ResetActiveCards();
            StateHasChanged();
        });
    }

    private void StartGame()
    {
        if (gameRunning)
            return;

        InitGame();

        gameTimer.Start();
        gameRunning = true;
    }

    private void StopGame()
    {
        gameTimer.Stop();
        gameRunning = false;
    }
}