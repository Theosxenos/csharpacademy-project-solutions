@page "/"

@inject MealService MealService

<PageTitle>Home</PageTitle>

<div class="container-lg">
    <div class="row mt-3 mb-3">
        <EditForm Model="mealSearchViewModel" OnValidSubmit="ValidSubmit">
            <div class="mb-3">
                <InputSelect @bind-Value="mealSearchViewModel.MealType" class="form-select">
                    <option value="">All</option>
                    @foreach (var mealType in Enum.GetValues<MealType>())
                    {
                        <option value="@mealType">@mealType</option>
                    }
                </InputSelect>
                <InputDate @bind-Value="mealSearchViewModel.Date" class="form-control"/>
                <InputText @bind-Value="mealSearchViewModel.SearchTerm" class="form-control" placeholder="Name of meal or food"/>
            </div>
            <div class="mb-3">
                <button class="btn btn-secondary" type="reset" @onclick="ClearSearch">Clear</button>
                <button class="btn btn-primary" type="submit">Search</button>
            </div>
        </EditForm>
    </div>
    <div class="mb-3 row row-cols-2">
        <div class="col">
            <ul class="list-group user-select-none">
                @foreach (var meal in meals)
                {
                    <li class="list-group-item @GetItemClass(meal.Id)" @onclick="() => selectedMeal = meal">
                        <img src="images/icons/icons8-@meal.MealType.ToString().ToLower()-48.png" alt="@meal.Name"/>
                        @($"{meal.Date:d} {meal.Name}")
                    </li>
                }
            </ul>
        </div>
        <div class="col">
            @if (selectedMeal != null)
            {
                <div class="row row-cols-5 bg-light">
                    @foreach (var food in selectedMeal.Foods)
                    {
                        <div class="col  text-center">
                            <img alt="@food.Name" src="images/icons/@food.Icon" class="food-icon"/>
                            <span class="text-muted">@food.Name</span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code
{
    List<Meal> meals = [];
    Meal? selectedMeal;
    MealSearchViewModel mealSearchViewModel = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMeals();
    }

    private async Task LoadMeals()
    {
        meals = await MealService.GetAllAsync();
        if(meals.Count > 0)
            selectedMeal = meals[0];
    }

    private string GetItemClass(int mealId)
    {
        return selectedMeal?.Id == mealId ? "active" : "";
    }

    private async Task ValidSubmit()
    {
        meals = await MealService.GetMealsBasedOnSearchAsync(mealSearchViewModel);

        selectedMeal = meals.Count > 0 ? meals[0] : null;
    }

    private async Task ClearSearch()
    {
        mealSearchViewModel = new();
        await LoadMeals();
    }
}
