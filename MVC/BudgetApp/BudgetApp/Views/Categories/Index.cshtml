@model IEnumerable<Category>

@{
    ViewBag.Title = "Categories";
}
<h2 class="display-5 text-center">Categories Overview</h2>
<div class="d-flex justify-content-end">
    <button class="btn btn-success" id="btnCategoryNew">Add New Category</button>
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th class="text-end">Manage</th>
        </tr>
        </thead>
        <tbody id="categoriesTableBody">
            @await Html.PartialAsync("CategoriesTableRows", Model)
        </tbody>
    </table>
</div>
@* Confirmation Modal *@
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <input type="hidden" id="deleteCategoryId"/>
          Are you sure you want to delete this category?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="btnCategoryDelete">Confirm</button>
      </div>
    </div>
  </div>
</div>

@await Html.PartialAsync("CategoryUpsertModal", Model.First())

@section Scripts
{
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="js/resetForm.js"></script>
    <script>
        // Dynamic content
        const categoriesTableBody = document.querySelector('#categoriesTableBody');

        // Table buttons
        const newCategoryButton = document.querySelector('#btnCategoryNew');

        // Upsert modal elements
        const editModal = new bootstrap.Modal('#editModal');
        const categoryUpsertForm = document.querySelector('#categoryUpsertForm');
        const categoryUpsertButton = document.querySelector('#btnCategoryUpdate');

        // Delete modal elements
        const deleteModal = new bootstrap.Modal('#confirmationModal');
        const deleteCategoryIdElement = document.querySelector('#deleteCategoryId');
        const categoryDeleteButton = document.querySelector('#btnCategoryDelete');

        // Event handling       
        categoriesTableBody.addEventListener('click', async (event) =>{
            const {target} = event;
            
            console.log(target);
            
            if(!target) {
                return;    
            }
            
            if (target.matches('.edit-category')) {
                resetFormValidation(categoryUpsertForm);
                
                const response = await fetch('/Categories/Detail/' + target.dataset.categoryid)

                 if (!response.ok) {
                     throw new Error(`HTTP error! status: ${response.status}`);
                 }

                const category = await response.json();

                categoryUpsertForm['editCategoryId'].value = category.id;
                categoryUpsertForm['Name'].value = category.name;
                
                editModal.show();    
            } else if (target.matches('.delete-category')) {
                 categoryUpsertForm['editCategoryId'].value = target.dataset.categoryid;

                deleteModal.show();
            }
        });
        
        newCategoryButton.addEventListener('click', () => {
            resetFormValidation(categoryUpsertForm);
            categoryUpsertForm['editCategoryId'].value = '';
            categoryUpsertForm['Name'].value = '';

            editModal.show();
        });
        
        categoryUpsertForm.addEventListener('submit', async (evt) => {
            evt.preventDefault();

            const todo = { id: Number(categoryUpsertForm['editCategoryId'].value), name: categoryUpsertForm['Name'].value };
            const route = todo.id === 0
                ? 'Categories/Create'
                : `/Categories/Update/${todo.id}`;
            const method = todo.id === 0 ? 'POST' : 'PUT';
            
            const response = await fetch(route, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(todo)
            });
            
             if (!response.ok) {
                 throw new Error(`HTTP error! status: ${response.status}`);
             }
            
            editModal.hide();
            categoriesTableBody.innerHTML = await response.text();
        });
        
        categoryUpsertButton.addEventListener('click', () => {
            // Create a new 'submit' event
            let event = new Event('submit', {
                bubbles: true, // Event will bubble up through the DOM
                cancelable: true // Event can be canceled
            });
        
            // Dispatch it on the form
            if (categoryUpsertForm.dispatchEvent(event)) {
                editModal.hide(); // Hide the modal only if the event wasn't canceled
            }
        });
        
        categoryDeleteButton.addEventListener('click', async () => {
                const response = await fetch('/Categories/Delete/' + Number(deleteCategoryIdElement.value), { method: 'delete'});
                
                 if (!response.ok) {
                     throw new Error(`HTTP error! status: ${response.status}`);
                 }
                 
                 deleteModal.hide();
                 categoriesTableBody.innerHTML = await response.text();
        });
    </script>
}
