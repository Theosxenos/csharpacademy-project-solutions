@model IEnumerable<BudgetApp.Data.Category>

@{
    ViewBag.Title = "Categories";
}
<h2 class="display-5 text-center">Categories Overview</h2>
<div class="d-flex justify-content-end">
    <button class="btn btn-success" id="btnCategoryNew">Add New Category</button>
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th class="text-end">Manage</th>
        </tr>
        </thead>
        <tbody id="categoriesTableBody">
            @await Html.PartialAsync("CategoriesTableRows", Model)
        </tbody>
    </table>
</div>
@* Edit modal  *@
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Upsert Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" id="editCategoryId"/>
                    <div class="mb-3">
                        <label for="category-name" class="col-form-label">Name:</label>
                        <input type="text" class="form-control" id="category-name">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnCategoryUpdate">Confirm</button>
            </div>
        </div>
    </div>
</div>

@* Confirmation Modal *@
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <input type="hidden" id="deleteCategoryId"/>
          Are you sure you want to delete this category?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="btnCategoryDelete">Confirm</button>
      </div>
    </div>
  </div>
</div>

@section Scripts
{
    <script>
        // Dynamic content
        const categoriesTableBody = document.querySelector('#categoriesTableBody');

        // Table buttons
        const editButtons = document.querySelectorAll('td.text-end>.btn-warning');
        const deleteButtons = document.querySelectorAll('td.text-end>.btn-danger');
        const newCategoryButton = document.querySelector('#btnCategoryNew');

        // Upsert modal elements
        const editModal = new bootstrap.Modal('#editModal');
        const categoryIdElement = document.querySelector('#editCategoryId');
        const categoryNameElement = document.querySelector('#category-name');
        const categoryUpdateButton = document.querySelector('#btnCategoryUpdate');

        // Delete modal elements
        const deleteModal = new bootstrap.Modal('#confirmationModal');
        const deleteCategoryIdElement = document.querySelector('#deleteCategoryId');
        const categoryDeleteButton = document.querySelector('#btnCategoryDelete');

        // Event handling

        editButtons.forEach(btn => {
            btn.addEventListener('click', async (event) => {
                const response = await fetch('/Categories/Detail/' + event.target.dataset.categoryid)

                 if (!response.ok) {
                     throw new Error(`HTTP error! status: ${response.status}`);
                 }

                const todoItem = await response.json();
                                
                categoryIdElement.value = todoItem.id;
                categoryNameElement.value = todoItem.name;
                
                editModal.show();
            });    
        });
                
        deleteButtons.forEach(btn => {
                btn.addEventListener('click', (event) =>{
                    deleteCategoryIdElement.value = event.target.dataset.categoryid;
                    
                    deleteModal.show();
                });
        });
        
        newCategoryButton.addEventListener('click', () => {
            categoryIdElement.value = '';
            categoryNameElement.value = '';
            
            editModal.show();
        });
        
        categoryUpdateButton.addEventListener('click', async () => {
            const todo = { id: Number(categoryIdElement.value), name: categoryNameElement.value };
            const route = todo.id === 0
                ? 'Categories/Create'
                : `/Categories/Update/${todo.id}`;
            const method = todo.id === 0 ? 'POST' : 'PUT';
            
            const response = await fetch(route, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(todo)
            });
            
             if (!response.ok) {
                 throw new Error(`HTTP error! status: ${response.status}`);
             }
            
            editModal.hide();
            categoriesTableBody.innerHTML = await response.text();             
        });
        
        categoryDeleteButton.addEventListener('click', async () => {
                const response = await fetch('/Categories/Delete/' + Number(deleteCategoryIdElement.value), { method: 'delete'});
                
                 if (!response.ok) {
                     throw new Error(`HTTP error! status: ${response.status}`);
                 }
                 
                 deleteModal.hide();
                 categoriesTableBody.innerHTML = await response.text();
        });
        
    </script>
}
