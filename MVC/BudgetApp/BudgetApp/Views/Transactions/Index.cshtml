@model BudgetApp.Models.Transaction[]

<h2 class="display-5 text-center">Transactions overview</h2>
<div class="d-flex justify-content-end">
    <button class="btn btn-success" id="btnTransactionNew">New Transaction</button>
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
        <tr>
            <th>@Html.DisplayNameFor(m => m[0].Date)</th>
            <th>@Html.DisplayNameFor(m => m[0].Comment)</th>
            <th class="text-end">@Html.DisplayNameFor(m => m[0].Amount)</th>
            <th>@Html.DisplayNameFor(m => m[0].Category.Name)</th>
            <th class="text-end">Manage</th>
        </tr>
        </thead>
        <tbody id="transactionsTableRows">
            @await Html.PartialAsync("TransactionsTableRows", Model)
        </tbody>
    </table>
</div>

@* Upsert modal  *@
<div class="modal fade" id="transactionUpsertModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Upsert Transaction</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="transactionUpsertModalBody">
                <form id="frmTransactionUpsert">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnTransactionUpsert">Confirm</button>
            </div>
        </div>
    </div>
</div>

@* Confirmation Modal *@
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="deleteTransactionId"/>
                Are you sure you want to delete this transaction?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="btnCategoryDelete">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_ValidationScriptsPartial");

    <script>
        // Dynamic content
        const transactionsTableRows = document.querySelector('#transactionsTableRows');
        
        // Table buttons
        const newTransactionButton = document.querySelector('#btnTransactionNew');
        let editButtons = document.querySelectorAll('.edit-button');
        
        // Transaction modal elements
        const upsertModal = new bootstrap.Modal('#transactionUpsertModal');
        const submitUpsertModalButton = document.querySelector('#btnTransactionUpsert');
        // const upsertModalBody = document.querySelector('#transactionUpsertModalBody');
        const upsertForm = document.querySelector('#frmTransactionUpsert');
        
        // Event handlers
        newTransactionButton.addEventListener('click', async () => {
            const response = await fetch('/Transactions/Create');
            
            if (!response.ok) {
                throw new Error(`HTML Error: ${response.status}`);   
            }
            
            upsertForm.innerHTML = await response.text();
            upsertModal.show();
        });
        
        upsertForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            console.log($(upsertForm).validate());
            
            const formData = new FormData(event.target);
            const transaction = { 
                id: Number(formData.get('Transaction.Id')),
                date: formData.get('Transaction.Date'),
                comment: formData.get('Transaction.Comment'),
                amount: formData.get('Transaction.Amount'),
                categoryId: formData.get('Transaction.Category.Id')
            }

            let method = 'PUT';
            let route = `/transactions/update/${transaction.id}`;
            if (transaction.id === 0) {
                method = 'POST';
                route = '/transactions/create';
            }

            const init = {
                method, 
                headers: {
                    'Content-Type' : 'application/json'  
                },
                body: JSON.stringify(transaction)
             }
            const response = await fetch(route, init);

            if (response.status === 400) {
                upsertForm.innerHTML = await response.text();
                return;
            } else if (!response.ok) {
                throw new Error(`HTML Error: ${response.status}`);   
            }

            transactionsTableRows.innerHTML = await response.text();
            upsertModal.hide();
        });
        
        submitUpsertModalButton.addEventListener('click', () => {
            // Create a new 'submit' event
            let event = new Event('submit', {
                bubbles: true, // Event will bubble up through the DOM
                cancelable: true // Event can be canceled
            });
        
            // Dispatch it on the form
            if (upsertForm.dispatchEvent(event)) {
                upsertModal.hide(); // Hide the modal only if the event wasn't canceled
            }
        });
        
        transactionsTableRows.addEventListener('click', async (event) => {
            if (event.target && event.target.matches('.edit-transaction')) {
                const transactionId = event.target.dataset.transactionid;
                const response = await fetch('Transactions/Detail/' + transactionId);
                
                if (!response.ok) {
                    throw new Error(`HTML Error: ${response.status}`);   
                }

                upsertForm.innerHTML = await response.text();
                upsertModal.show();
            }
        })
    </script>
}
